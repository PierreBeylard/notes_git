touch monFichier.extension : pour créer un fichier 
mkdir "nomDossier" : pour créer un dossier
git init : pour activer un  dossier comme repository sur git, il faut l'initialiser en se placant dans le dossier avant de taper la commande
git add nomFichier.extension : pour ajouter un fichier à l'index  
git commit nomfichier.extension "commentaires sur la modification créée" : pour commiter les fichiers indexés du repository
git status : pour voir le status du repository  
git log : pour suivre les changements et les commit, on peut utiliser les logs
astuce : pour ne pas avoir à faire git add puis git commit, on peut faire la commande suivante : git -a -m "commentaires" cela est possible que si le fichier a initialement été ajouté à l'index

SHA : idendifiant unique de chaque version des fichiers 

git checkout "codeSHA" : permet de se positionner sur la version du fichier identifée par le SHA 
git checkout master : permet de revenir à la version la plus récente du fichier
git revert "codeSHA" : commit créer un nouveau commit qui fait l'inverse du précédent
git commit --amend -m "nouveau message" : permet de remplacer le message du dernier commit. Mais attention, vous ne pouvez modifier ce message que si vous n'avez pas encore pushé votre commit sur l'origine !
git reset --hard : permet d'annuler les modifications en cours qui n'ont pas été commitées
git clone : clonner un repository sur son git hub
git push origin master origin est le nom par défaut donné au remote github (remote correspond à une sauvegarde sur une machine à distance). push permet d'envoyer les donnée. master est le nom de la branche sur laquelle on veut pousser les données 
git pull origin master: permet de récuperer depuis un remote la dernière version d'un code. pratique lorsque l'on a travaillé à plusieurs sur un code. la personne fait les modifications, les commits, les push sur le remote. de la, on les récupére avec un pull
git branch : donne les différentes branch du code. la principale est la master
git branch "nomBranche" : permet de créer une nouvelle branche 
git checkout "nomBranche": permet de se positionner sur cette nouvelle branche
git checkout -b ma-branche : permet de fusionner la création d'une branche et se positionner dans la branche

#####################################################   GESTION DES CONFLITS   ##############################################################
lorsque l'on créait une branch et que l'on travaille sur un fichier, il arrive que quelqu'un travaille sur ce fichier en même temps dans le master. Dans ce cas, lorsque l'on fait un merge
on a un conflit. Pour résoudre le conflit, on a git qui highlight les parties modifiées en conflit, il faut alors choisir ce que l'on veut garder. 
ensuite 
git commit : sans autre commentaire, cela signifiera que l'on a résolut le conflit et que l'on veut merger les documents, une sauvegarde suffit
on peut ajouter un commentaire au moment de notre commit pour ne pas avoir le message type (mais seulement après avoir mis git commit)
