# les commandes git

touch monFichier.extension : pour créer un fichier 
mkdir "nomDossier" : pour créer un dossier
git init : pour activer un  dossier comme repository sur git, il faut l'initialiser en se placant dans le dossier avant de taper la commande
git add nomFichier.extension : pour ajouter un fichier à l'index  
git commit nomfichier.extension "commentaires sur la modification créée" : pour commiter les fichiers indexés du repository
git status : pour voir le status du repository  
git log : pour suivre les changements et les commit, on peut utiliser les logs
astuce : pour ne pas avoir à faire git add puis git commit, on peut faire la commande suivante : git -a -m "commentaires" cela est possible que si le fichier a initialement été ajouté à l'index
git remote add origin lien_repository_github : permet lorsque l'on a un repository git local de le pousser sur son github. il faut créer son rep git hub vide et copier le lien de celui ci


SHA : idendifiant unique de chaque version des fichiers 

git checkout "codeSHA" : permet de se positionner sur la version du fichier identifée par le SHA 
git checkout master (remplacé par main) : permet de revenir à la version la plus récente du fichier
git revert "codeSHA" : commit créer un nouveau commit qui fait l'inverse du précédent
git commit --amend -m "nouveau message" : permet de remplacer le message du dernier commit. Mais attention, vous ne pouvez modifier ce message que si vous n'avez pas encore pushé votre commit sur l'origine !
git reset --hard : permet d'annuler les modifications en cours qui n'ont pas été commitées
git clone : clonner un repository sur son git hub
git push origin master(remplacé par main) origin est le nom par défaut donné au remote github (remote correspond à une sauvegarde sur une machine à distance). push permet d'envoyer les donnée. master (remplacé par main) est le nom de la branche sur laquelle on veut pousser les données 
git pull origin master (remplacé par main): permet de récuperer depuis un remote la dernière version d'un code. pratique lorsque l'on a travaillé à plusieurs sur un code. la personne fait les modifications, les commits, les push sur le remote. de la, on les récupére avec un pull
git branch : donne les différentes branch du code. la principale est la master (remplacé par main)
git branch "nomBranche" : permet de créer une nouvelle branche 
git checkout "nomBranche": permet de se positionner sur cette nouvelle branche
git checkout -b ma-branche : permet de fusionner la création d'une branche et se positionner dans la branche
git merge "nomBrancheàRecuperer": si on est dans master (remplacé par main), et qu'on merge avec une brance annexe, on met le nom de la branche annexe, les modifications de la branche annexe seront alors importées dans master (remplacé par main).
git branch -d ma-branche : permet de supprimer une branche
fichier sensible ajouté par erreur  à git -supprimer de l'historique :https://help.github.com/en/github/authenticating-to-github/removing-sensitive-data-from-a-repository


#####################################################   GESTION DES CONFLITS   ##############################################################

lorsque l'on créait une branch et que l'on travaille sur un fichier, il arrive que quelqu'un travaille sur ce fichier en même temps dans le master (remplacé par main). Dans ce cas, lorsque l'on fait un merge
on a un conflit. Pour résoudre le conflit, on a git qui highlight les parties modifiées en conflit, il faut alors choisir ce que l'on veut garder. 
ensuite 
git commit : sans autre commentaire, cela signifiera que l'on a résolut le conflit et que l'on veut merger les documents, une sauvegarde suffit
on peut ajouter un commentaire au moment de notre commit pour ne pas avoir le message type (mais seulement après avoir mis git commit)

git blame "nomfichier.extension": permet de voir la liste de toutes les modifications éffectuées dans un fichier ainsi que le début des SHA associés 
git show "SHA" : le sha trouvé dans la commande git blame --> cela donne plus d'information sur ce qu'il s'est passé durant ce commit 

####################################################   SECURITE ET FICHIERS A IGNORER #########################################################

Pour des raisons de sécurité et de clarté, il est important d'ignorer certains fichiers dans Git, tels que :

Tous les fichiers de configuration (config.xml, databases.yml, .env...)

Les fichiers et dossiers temporaires (tmp, temp/...)

Les fichiers inutiles comme ceux créés par votre IDE ou votre OS (.DS_Store, .project...)

Le plus crucial est de ne JAMAIS versionner une variable de configuration, que ce soit un mot de passe, une clé secrète ou quoi que ce soit de ce type. Versionner une telle variable conduirait à une large faille de sécurité, surtout si vous mettez votre code en ligne sur GitHub !

git ignore : on créait ce fichier dans le repository. dans ce fichier, on ajoute les noms des fichiers que l'on veut que git ignore. Ainsi, lorsque l'on commit, git ne prendra pas en compte ces fichiers.

Le fichier .gitignore doit être tracké comme vos autres fichiers dans Git : vous devez donc l'ajouter à l'index et le committer. 


#####################################################   GIT STASH ###########################################################

Son travaille sur une fonction, mais qu'on est interrompu au milieu, si vous faites un commit des modifications sur votre fonction à ce stade, cela va alourdir votre historique car vous n'avez pas terminé votre tâche.

Comment faire pour ne pas perdre vos modifications en cours avant de passer à l'urgence à traiter ?

Et bien vous pouvez mettre de côté vos modifications en cours avec la commande :

git stash: mets vos modifications de coté, la branche principale n'est pas polluée. 
git stash pop: reprendre vos modifications avec la mise à jour du reste du code liées aux potentielels modifications réalisées. 

SI on le fait depuis une branche, les modifications réalisées dans la branche principale ne sont pas prises en compte, elles le seront au moment du merge. 	
le stash est perdu une fois que l'on fait un pop. si on veut remettre de coté, il faut refaire un stash

Si vous voulez garder les modifications dans votre stash, vous pouvez utiliser apply à la place de pop :
git stash apply

##################################################  FORK - CONTRIBUER AUX PROJETS OPENSOURCES #############################################################

si on est sur git hub et que l'on souhaite travailler sur un projet open source, il faut forker le projet. Fork signifie : prend ce repository et fais en une copie à moi
fork prend le projet et le copie sur notre git hub. Si on le veut sur sa machine, il faut alors le cloner
TOUJOURS LIRE DANS LE README OU AILLEURS LE PROCESS DE CONTRIBUTION DU PROJET

